{
  "name": "xhr2proxy",
  "description": "HTTP/HTTPS proxy middleware of connect/express for XHR(XMLHTTPRequest) with referer restriction and appending Access-Control-Allow-Origin for cross domain(CORS) XHR2",
  "main": "index.js",
  "version": "0.1.4",
  "dependencies": {
    "http-proxy": "0.10.3"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kssfilo/nodejs.xhr2proxy"
  },
  "devDependencies": {
    "mocha": "*",
    "connect": "*",
    "request": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "tags": [
    "connect",
    "express",
    "cors",
    "middleware",
    "cross domain"
  ],
  "author": {
    "name": "kssfilo"
  },
  "license": "MIT",
  "readmeFilename": "readme.md",
  "_id": "xhr2proxy@0.1.4",
  "_from": "xhr2proxy@^0.1.4",
  "readme": "##Description\n\n HTTP/HTTPS proxy plugin of connect/express for XHR(XMLHTTPRequest)\n with referer restriction and appending Access-Control-Allow-Origin for cross domain XHR2\n Based on cdproxy by macchadogj(thanks)\n\n##Installation\n\n\t$ npm install xhr2proxy\n\n##Usage\n\n###basic\n\n\tvar xhr2proxy = require('xhr2proxy');\n\t\n\tconnect()\n\t\t.use(xhr2proxy({prefix:'myprefix'})) //proxy by default.\n\t\t.use(function ( req, res ) {\n\t\tres.end(\"Hello from Connect!\");\n\t}).listen(8000);\n\t\n\t//var xhr=new XMLHttpRequest();\n\t//xhr.open('get','http://localhost:8000/myprefix/http://myremote.server',false);\n\t//xhr.send();\n\n##basic(express)\n\n\tvar xhr2proxy = require('xhr2proxy');\n\tvar app=require('express').createServer();\n\tapp.use(xhr2proxy());\n\tapp.listen(8000);\n\t\n\t//var xhr=new XMLHttpRequest();\n\t//xhr.open('get','http://localhost:8000/prefix/http://myremote.server',false);\n\t//xhr.send();\n\n\n###Appending Access-Control-Allow-Origin to response headers\n\nIt allows XMLHttpRequest level2 to connect with non supported servers from outside of the domains which runs this script.\n\n\tvar xhr2proxy = require('xhr2proxy');\n\t\n\tconnect()\n\t\t.use(xhr2proxy({prefix:'myprefix',acao:'*'}) //Append [Access-Control-Allow-Origin: *]\n\t\t.use(function ( req, res ) {\n\t\tres.end(\"Hello from Connect!\");\n\t}).listen(8000);\n\t\n\t//var xhr=new XMLHttpRequest();\n\t//xhr.open('get','http://anywhrere:8000/myprefix/http://myremote.server',false);\n\t//xhr.send();\n\n###referer restriction\n\nprevent out-site using by referer restriction.__CAUTION:It cannot recognize fake headers.__\n\n\tvar xhr2proxy = require('xhr2proxy');\n\t\n\tconnect()\n\t\t.use(xhr2proxy({prefix:'myprefix',referer:/^http:\\/\\/localhost/})) //deny if referer isnot http://localhost...\n\t\t.use(function ( req, res ) {\n\t\tres.end(\"Hello from Connect!\");\n\t}).listen(8000);\n\t\n\t//var xhr=new XMLHttpRequest();\n\t//xhr.open(''get',http://localhost:8000/myprefix/http://myremote.server',false);\n\t//xhr.send();\n\t//with referer http://localhost:8000/anywhere.html\n\n###other options\n\n#### suppressHostNameOnRequest(bool)\n\n\tdefault or false:\n\t\tGET http://localhost/path HTTP/1.0\n\t\t\t\t\t.\n\t\t\t\t\t.\n\n\ttrue:\n\t\tGET /path HTTP/1.0\n\t\t\t\t\t.\n\t\t\t\t\t.\n\n##Running unit tests\n\n\t$npm test\n\n##History\n\n0.1.0: Adds option suppressHostNameOnRequest.\n",
  "bugs": {
    "url": "https://github.com/kssfilo/nodejs.xhr2proxy/issues"
  },
  "homepage": "https://github.com/kssfilo/nodejs.xhr2proxy"
}
